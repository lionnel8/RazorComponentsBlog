@page "/article/{id:int}/{url}"
@using RazorComponentsBlog.Models
@using Microsoft.AspNetCore.Components.Services
@using RazorComponentsBlog.Services
@inject IUriHelper UriHelper
@inject IJSRuntime JSRuntime
@inject ArticleService ArticleService
@inject Sotsera.Blazor.Toaster.IToaster toaster

@if (article != null)
{
    <div>
        <TopFrame TopFrameClass="page-no-index" Title="@article.Title">
            <p>@article.Created.ToString("dd. MM. yyyy")</p>
        </TopFrame>
    </div>
    <div class="container rcb-container" id="articleDetailContent">
        <div class="row">
            <div class="col-12">
                <div class="article-detail__image-box">
                    @if (String.IsNullOrEmpty(article.Image))
                    {
                        <img src="images/defaultImg.jpg" class="img-fluid mb-5" alt="@article.Title" />
                    }
                    else
                    {
                        <img src=@("uploads/images/" + article.Image) class="img-fluid mb-5" alt="@article.Title" />
                    }
                </div>
                <div class="article-detail__article-text">
                    @((MarkupString)article.Text)
                </div>
            </div>
        </div>
    </div>
}

@functions {

    [Parameter]
    private int Id { get; set; }

    [Parameter]
    private string Url { get; set; }

    Article article;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        article = await ArticleService.GetArticleDetail(Id, Url);

        if (article == null)
        {
            UriHelper.NavigateTo("/page-not-found");
        }

    }

    protected override void OnAfterRender()
    {
        base.OnAfterRender();
        JSRuntime.InvokeAsync<object>("tinymceInterop.highlightCode");
    }


}

