@page "/"
@page "/page/{pageIndex:int}"

@using RazorComponentsBlog.Models
@using RazorComponentsBlog.Services
@using Gobln.Pager;
@using Microsoft.AspNetCore.Components.Services

@inject IUriHelper UriHelper
@inject ArticleService ArticleService
@inject IJSRuntime JSRuntime

<div class="mb-5">
    <TopFrame TopFrameClass="page-index" Title="Razor Components Blog">
        <p class="lead mt-4">Blog o ASP.NET Core Razor Components a Blazoru</p>
    </TopFrame>
</div>

<div class="container rcb-container" id="articleContainer">
    <div class="row">
        @if (!displayedArticles.Any())
        {
            <p>Načítání článků</p>
        }
        else
        {
            @foreach (var article in displayedArticles)
            {
                <ArticleCard ArticleId="@article.ArticleId"
                             Title="@article.Title"
                             Text="@article.Text"
                             Created="@article.Created"
                             Url="@article.Url"
                             Image="@article.Image"
                             IsFirst="@(displayedArticles.First() == article)"
                             IsLast="@(displayedArticles.Last() == article)">
                </ArticleCard>
            }
        }
    </div>

    @if (articles.Any())
    {
        <Pager PageCount="@articles.PageCount"
               CurrentPage="@PageIndex"
               HasNextPage="@articles.HasNextPage"
               HasPreviousPage="@articles.HasPreviousPage"
               OnPageChanged="@ChangePage">
        </Pager>
    }
</div>

@functions {

    [Parameter]
    private int PageIndex { get; set; }

    PagedList<Article> articles = new PagedList<Article>();

    List<Article> displayedArticles = new List<Article>();

    private int pageSize = 6;

    protected override async Task OnInitAsync()
    {
        articles = await ArticleService.GetPagedArticles();
        articles.PageSize = pageSize;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSetAsync();
        if (PageIndex == 0)
        {
            PageIndex = 1;
        }
        displayedArticles = articles.GetPage(PageIndex).ToList();
    }

    private async void ChangePage(int pageIndex)
    {
        if (pageIndex == 1)
        {
            UriHelper.NavigateTo("/");
        }
        else
        {
            UriHelper.NavigateTo("/page/" + pageIndex.ToString());
        }

        PageIndex = pageIndex;
        this.StateHasChanged();
    }
}
