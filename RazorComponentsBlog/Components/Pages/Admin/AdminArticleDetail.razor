@page "/admin/article/new"
@page "/admin/article/{id:int}/{url}"

@using System.IO
@using Blazor.FileReader
@using Microsoft.AspNetCore.Hosting
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Formats.Jpeg
@using RazorComponentsBlog.Models
@using RazorComponentsBlog.Services
@using Microsoft.AspNetCore.Components.Services
@using System.Text
@using System.Text.RegularExpressions

@inject ArticleService ArticleService
@inject IUriHelper UriHelper
@inject IWebHostEnvironment env;
@inject IFileReaderService fileReaderService;
@inject IJSRuntime JSRuntime
@inject Sotsera.Blazor.Toaster.IToaster toaster

<div class="container rcb-container">
    <div class="row">
        <div class="col-12">
            <h1 class="text-center mt-5 mb-5">@(article == null ? "Nový článek" : "Editace článku")</h1>
            <div class="form-group mb-5">
                <label for="articleTitleInput" class="h4">Titulek článku</label>
                <input type="text" class="form-control" id="articleTitleInput" placeholder="Titulek článku" value="@(article == null ? "" : article.Title)" bind="@ArticleTitle" />
            </div>
            <div class="form-group mb-5">
                <label class="h4">Úvodní obrázek</label>
                <div class="custom-file mb-3">
                    <input type="file" ref="FileInput" accept="image/*" class="custom-file-input" id="imageFileInput" onchange="@GenerateImageThumbnail" />
                    <label class="custom-file-label" for="imageFileInput">Soubor</label>
                </div>
                <div class="text-center">
                    @if (imageThumbnailGenerating)
                    {
                        <p>Probíhá generování náhledu obrázku...</p>
                    }
                    else if (!String.IsNullOrEmpty(imageBase64))
                    {
                        <img src=@imageBase64 class="img-fluid" />
                    }
                    else if (!String.IsNullOrEmpty(article?.Image))
                    {
                        <img src=@("uploads/images/" + article.Image) class="img-fluid" />
                    }
                </div>
            </div>
            <div class="form-group mb-5">
                <label class="h4">Text článku</label>
                <textarea>@(article == null ? "" : article.Text)</textarea>
            </div>
            <div class="form-group">
                @if (article == null)
                {
                    <button class="btn btn-primary" onclick="@SaveNewArticle">Uložit článek</button>
                }
                else
                {
                    <button class="btn btn-primary" onclick="@UpdateArticle">Uložit změny</button>
                }
            </div>
        </div>
    </div>
</div>



@functions {

    [Parameter]
    private int Id { get; set; }

    [Parameter]
    private string Url { get; set; }

    private string ArticleTitle { get; set; }

    public string Output { get; set; }

    public string ImageName { get; set; }

    public string EditorContent { get; set; }

    private string imageBase64;

    private bool imageThumbnailGenerating = false;

    ElementRef FileInput;

    Article article;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        article = await ArticleService.GetArticleDetail(Id, Url);
        ArticleTitle = article?.Title;
    }

    protected override void OnAfterRender()
    {
        base.OnAfterRender();
        JSRuntime.InvokeAsync<object>("tinymceInterop.init");
    }

    public async void UpdateArticle()
    {
        await UploadImage();
        EditorContent = await JSRuntime.InvokeAsync<string>("tinymceInterop.getContent");
        string url = ToUrlSlug(ArticleTitle);

        article.Title = ArticleTitle;
        article.Text = EditorContent;
        article.Image = ImageName ?? article.Image;
        article.Url = url;

        await ArticleService.UpdateArticle(article);

        toaster.Success("Změny byly uloženy");
        UriHelper.NavigateTo("/");
    }

    public async void SaveNewArticle()
    {
        await UploadImage();
        EditorContent = await JSRuntime.InvokeAsync<string>("tinymceInterop.getContent");
        string url = ToUrlSlug(ArticleTitle);

        Article article = new Article { Created = DateTime.Now, Title = ArticleTitle, Text = EditorContent, Image = ImageName, Url = url, UserId = 1 };
        await ArticleService.AddArticle(article);

        toaster.Success("Článek byl uložen");
        UriHelper.NavigateTo("/");
    }

    public async Task GenerateImageThumbnail()
    {
        imageBase64 = null;
        imageThumbnailGenerating = true;

        foreach (var file in await fileReaderService.CreateReference(FileInput).EnumerateFilesAsync())
        {
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
            using (Image<Rgba32> image = Image.Load(memoryStream))
            {
                if (image.Width > 800)
                {
                    image.Mutate(i => i.Resize(800, 0));
                }

                if (image.Height > 800)
                {
                    image.Mutate(i => i.Resize(0, 800));
                }
                imageBase64 = image.ToBase64String(JpegFormat.Instance);
                imageThumbnailGenerating = false;
            }
        }
    }

    public async Task UploadImage()
    {
        foreach (var file in await fileReaderService.CreateReference(FileInput).EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            ImageName = MakeValidFileName(fileInfo.Name);
            var uploadPath = Path.Combine(env.WebRootPath, "uploads/images", ImageName);

            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
            using (Image<Rgba32> image = Image.Load(memoryStream))
            {
                if (image.Width > 1000)
                {
                    image.Mutate(i => i.Resize(1000, 0));
                }

                if (image.Height > 1000)
                {
                    image.Mutate(i => i.Resize(0, 1000));
                }
                image.Save(uploadPath);
            }
        }

    }

    private static string MakeValidFileName(string name)
    {
        string invalidChars = System.Text.RegularExpressions.Regex.Escape(new string(System.IO.Path.GetInvalidFileNameChars()));
        string invalidRegStr = string.Format(@"([{0}]*\.+$)|([{0}]+)", invalidChars);

        return System.Text.RegularExpressions.Regex.Replace(name, invalidRegStr, "_");
    }

    private static string ToUrlSlug(string value)
    {

        //First to lower case
        value = value.ToLowerInvariant();

        //Remove all accents
        var bytes = Encoding.GetEncoding("Cyrillic").GetBytes(value);
        value = Encoding.ASCII.GetString(bytes);

        //Replace spaces
        value = Regex.Replace(value, @"\s", "-", RegexOptions.Compiled);

        //Remove invalid chars
        value = Regex.Replace(value, @"[^a-z0-9\s-_]", "", RegexOptions.Compiled);

        //Trim dashes from end
        value = value.Trim('-', '_');

        //Replace double occurences of - or _
        value = Regex.Replace(value, @"([-_]){2,}", "$1", RegexOptions.Compiled);

        return value;
    }
}
